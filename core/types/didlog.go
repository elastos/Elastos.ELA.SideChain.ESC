package types

import (
	"io"

	"github.com/elastos/Elastos.ELA.SideChain.ETH/common"
	"github.com/elastos/Elastos.ELA.SideChain.ETH/rlp"

)

// DIDLog represents a did log. These events are generated by the did precompile contract operationDID and
// stored/indexed by the node.
type DIDLog struct {
	// Consensus fields:
	// address of the contract that generated the event
	DID string `json:"did"`

	Operation string `json:"operation"`

	// did json document
	Data []byte `json:"data"`

	// hash of the transaction
	TxHash common.Hash `json:"transactionHash"`

	// The Removed field is true if this log was reverted due to a chain reorganisation.
	// You must pay attention to this field if you receive logs through a filter query.
	Removed bool `json:"removed"`
}

// EncodeRLP implements rlp.Encoder.
func (l *DIDLog) EncodeRLP(w io.Writer) error {
	return rlp.Encode(w, rlpDIDLog{DID: l.DID, Operation: l.Operation, Data: l.Data, TxHash: l.TxHash})
}

// DecodeRLP implements rlp.Decoder.
func (l *DIDLog) DecodeRLP(s *rlp.Stream) error {
	var dec rlpDIDLog
	err := s.Decode(&dec)
	if err == nil {
		l.DID, l.Operation, l.Data, l.TxHash = dec.DID, dec.Operation, dec.Data, dec.TxHash
	}
	return err
}

// DecodeRLP implements rlp.Decoder.
func (l *DIDLog) DIDLog(s *rlp.Stream) error {
	var dec rlpDIDLog
	err := s.Decode(&dec)
	if err == nil {
		l.DID, l.Operation, l.Data, l.TxHash = dec.DID, dec.Operation, dec.Data, dec.TxHash
	}
	return err
}

type DIDLogForStorage DIDLog


type rlpDIDLog struct {
	DID string
	Operation string
	Data    []byte
	TxHash common.Hash
}


// EncodeRLP implements rlp.Encoder.
func (l *DIDLogForStorage) EncodeRLP(w io.Writer) error {
	return rlp.Encode(w, rlpDIDLog{
		DID: l.DID,
		Operation:  l.Operation,
		Data:    l.Data,
		TxHash: l.TxHash,
	})
}

// DecodeRLP implements rlp.Decoder.
func (l *DIDLogForStorage) DecodeRLP(s *rlp.Stream) error {
	blob, err := s.Raw()
	if err != nil {
		return err
	}
	var dec rlpDIDLog
	err = rlp.DecodeBytes(blob, &dec)
	if err == nil {
		*l = DIDLogForStorage{
			DID: dec.DID,
			Operation:  dec.Operation,
			Data:    dec.Data,
			TxHash: dec.TxHash,
		}
	}
	return err
}